<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class NoteTable extends Doctrine_Table
{
  static function serialize(Array $ary)
  {
    if (!count($ary))
    {
      return null;
    }

    return ',' . implode(',', $ary) . ',';
  }


  static function unserialize($str)
  {
    if ($str = trim($str, ','))
    {
      return explode(',', $str);
    }
    
    return array();
  }


  static function getUserMarkup(sfGuardUser $user)
  {
    if (!$user->id)
    {
      throw new Exception("Can't get note markup for new user");
    }
    
    return '@' . $user->getProfile()->public_name;
  }


  static function getRecordMarkup($record, $name=null, $model=null)
  {
    if (!$record['id'])
    {
      throw new Exception("Can't get note markup for new record");
    }

    if (!$model)
    {
      $model = strtolower(get_class($record));
    }
    
    if (!$model)
    {
      throw new Exception("Can't get note markup without specifying a model");      
    }
    
    $model = $model == 'relationship' ? 'rel' : $model;
    $model = $model == 'lslist' ? 'list' : $model;
    $model = $model == 'sfguardgroup' ? 'group' : $model;
    $markup = sprintf('@%s:%s', $model, $record['id']);

    if (!$name && in_array($model, array('entity', 'list', 'group')))
    {
      $name = $record['name'];
    }

    if ($name)
    {
      $markup .= '[' . $name . ']';
    }    
    
    return $markup;
  }


  /*
   * Adapted from laconi.ca
   */
  static function cleanBody($str)
  {
    $str = preg_replace('/[\x{0}-\x{8}\x{b}-\x{c}\x{e}-\x{19}]/', '', $str);

    return $str;
  }

  
  /*
   * Adapted from laconi.ca
   */
  static function renderUrls($str)
  {
    //must unescape < and > chars before parsing
    $str = str_replace('&lt;', '<', $str);
    $str = str_replace('&gt;', '>', $str);

    return preg_replace_callback('@https?://[^\]>\s]+@', array('self', 'renderUrlCallback'), $str);
  }


  static function renderTags($str)
  {
    return preg_replace('/(^|\s+)#([A-Za-z0-9_\-\.]{1,64})/e', "'\\1#'.common_tag_link('\\2')", $str);  
  }


  static function renderUsers($str)
  {
    $str = preg_replace('/(^|\s+|\()@([' . sfGuardUserProfileTable::$publicNameChars . ']{1,64})/e', "'\\1@'.self::renderUserByUsername('\\2')", $str);

    return $str;
  }


  static function renderUserByUsername($username)
  {
    //skip @entity, @list, and @rel
    if (in_array($username, array('entity', 'list', 'rel', 'group')))
    {
      return $username;
    }
  
  
    sfLoader::loadHelpers(array('Tag', 'Url'));

    return link_to($username, '@userView?name=' . $username, 'class=note_alerted_user');
  }


  //replaces entity/list/relationship markup with text and link to entity/list/relationship page
  static function renderRecords($str)
  {
    return preg_replace('/@(entity|list|rel|group):(\d+)(\[([^\]]+)\])?/e', "self::renderRecord('\\1', '\\2', '\\4')", $str);  
  }


  static function renderRecord($model, $id, $name=null)
  {
    sfLoader::loadHelpers(array('Tag', 'Url', 'Ls'));
    $originalModel = $model;

    if ($model == 'rel') { $model = 'relationship'; }
    if ($model == 'list') { $model = 'LsList'; }
    if ($model == 'group') { $model = 'sfGuardGroup'; }

    $model = ucfirst($model);
    $lower = strtolower($model);
    
    $q = LsDoctrineQuery::create()
      ->from($model . ' ' . $lower)
      ->where($lower . '.id = ?', $id);

    if (!$record = $q->fetchOne())
    {
      return '@' . $originalModel . ':' . $id . ($name ? '[' . $name . ']' : '');
    }
    
    return link_to($name ? $name : $record->getName(), $record->getInternalUrl(), 'class=note_record');
  }


  /*
   * Adapted from laconi.ca
   */
  static function longUrl($uri)
  {
    $uri_e = urlencode($uri);
    $longurl = unserialize(file_get_contents("http://api.longurl.org/v1/expand?format=php&url=$uri_e"));

    if (empty($longurl['long_url']) || $uri === $longurl['long_url']) return false;

    return stripslashes($longurl['long_url']);
  }


  /*
   * Adapted from laconi.ca
   */
  static function renderUrlCallback($matches)
  {
    $uri = $matches[0];
    $trailer = '';
  
    # Some heuristics for extracting URIs from surrounding punctuation
    # Strip from trailing text...
    if (preg_match('/^(.*)([,.:"\']+)$/', $uri, $matches)) {
      $uri = $matches[1];
      $trailer = $matches[2];
    }
  
    $pairs = array(
      ']' => '[', # technically disallowed in URIs, but used in Java docs
      ')' => '(', # far too frequent in Wikipedia and MSDN
    );
    $final = substr($uri, -1, 1);

    if (isset($pairs[$final])) {
      $openers = substr_count($uri, $pairs[$final]);
      $closers = substr_count($uri, $final);
      if ($closers > $openers) {
        // Assume the paren was opened outside the URI
        $uri = substr($uri, 0, -1);
        $trailer = $final . $trailer;
      }
    }

    /* SKIP THIS PART, FOR NOW, BECAUSE IT'S SLOW
    if ($longurl = self::longUrl($uri)) {
      $longurl = htmlentities($longurl, ENT_QUOTES, 'UTF-8');
      $title = " title='$longurl'";
    }
    else $title = '';
    */
    
    return '<a href="' . $uri . '"' . $title . ' class="extlink">' . $uri . '</a>' . $trailer;
  }


  static function getUserNotesQuery($user, $withReplies=true)
  {
    if (!($user instanceOf sfGuardUser))
    {
      if (!$user = Doctrine::getTable('sfGuardUser')->find($user))
      {
        throw new Exception("Can't get Notes; invalid user");
      }      
    }

    $q = LsDoctrineQuery::create()
      ->from('Note n')
      ->leftJoin('n.User u')
      ->leftJoin('u.Profile p')
      ->orderBy('n.created_at DESC');

    $currentUser = sfContext::getInstance()->getUser();
    $currentGuardUser = $currentUser->getGuardUser();
    $isCurrentUser = $currentUser->isAuthenticated() && ($currentGuardUser->id == $user->id);
      
    if ($withReplies)
    {
      $q->andWhere('n.user_id = ? OR n.alerted_user_names LIKE ?', array($user->id, '%,' . $user->getProfile()->public_name . ',%'));    
    }
    else
    {
      $q->andWhere('n.user_id = ?', $user->id);
    }

    if (!$isCurrentUser)
    {
      if ($withReplies && $currentGuardUser)
      {
        $q->andWhere('n.is_private = ? OR n.alerted_user_names LIKE ?', array(false, '%,' . $currentGuardUser->getProfile()->public_name . ',%'));
      }
      else
      {
        $q->andWhere('n.is_private = ?', false);      
      }
    }

    return $q;
  }
  
  
  static function getNotesByRecordQuery(Doctrine_Record $record)
  {
    $model = get_class($record);
    $id = $record->id;

    $currentUser = sfContext::getInstance()->getUser();
    $currentGuardUser = $currentUser->getGuardUser();
    
    $q = LsDoctrineQuery::create()
      ->from('Note n')
      ->leftJoin('n.User u')
      ->leftJoin('u.Profile p')
      ->andWhere('n.' . strtolower($model) . '_ids LIKE ?', '%,' . $record->id . ',%')
      ->orderBy('n.id DESC');
      
    if ($currentGuardUser)
    {
      $q->andWhere('n.is_private = ? OR n.user_id = ? OR n.alerted_user_names LIKE ?', array(false, $currentGuardUser->id, '%,' . $currentGuardUser->getProfile()->public_name . ',%'));
    }
    else
    {
      $q->andWhere('n.is_private = ?', false);
    }
      
    return $q;
  }


  static function getNotesByModelAndIdQuery($model, $id)
  {
    $currentUser = sfContext::getInstance()->getUser();
    $currentGuardUser = $currentUser->getGuardUser();
    
    $q = LsDoctrineQuery::create()
      ->from('Note n')
      ->leftJoin('n.User u')
      ->leftJoin('u.Profile p')
      ->andWhere('n.' . strtolower($model) . '_ids LIKE ?', '%,' . $id . ',%')
      ->orderBy('n.id DESC');
      
    if ($currentGuardUser)
    {
      $q->andWhere('n.is_private = ? OR n.user_id = ? OR n.alerted_user_names LIKE ?', array(false, $currentGuardUser->id, '%,' . $currentGuardUser->getProfile()->public_name . ',%'));
    }
    else
    {
      $q->andWhere('n.is_private = ?', false);
    }
      
    return $q;
  }


  static function getVisibleQuery()
  {
    $user = sfContext::getInstance()->getUser();

    $q = LsDoctrineQuery::create()
      ->from('Note n')
      ->orderBy('n.updated_at DESC');

    if ($user->isAuthenticated())
    {
      $currentGuardUser = $user->getGuardUser();
      $q->andWhere('n.is_private = ? OR n.user_id = ? OR n.alerted_user_names LIKE ?', array(false, $currentGuardUser->id, '%,' . $currentGuardUser->getProfile()->public_name . ',%'));
    }
    else
    {
      $q->andWhere('n.is_private = ?', false);
    }  

    return $q;
  }


  static function prepareBodyForDisplay($str)
  {
    $str = preg_replace('#(<a [^>]+>)([^<]{51,})(</a>)#ie', "'\\1' . substr('\\2', 0, 41) . '...\\3'", $str);
    $str = stripslashes($str);
    $str = nl2br($str);

    $breakPos = strpos($str, '<!--more-->');
    
    if ($breakPos !== false)
    {
      $id = substr(md5($str . microtime(true)), 0, 10);
      $short = substr($str, 0, $breakPos);
      $long = str_replace('<!--more-->', '', $str);
      
      $html = '<span id="' . $id . '_excerpt">';
      $html .= $short;      
      $html .= ' <a class="pointer" onclick="' .
               'document.getElementById(\'' . $id . '_excerpt\').style.display = \'none\'; ' .
               'document.getElementById(\'' . $id . '_full\').style.display = \'inline\'; ' .
               '">more&nbsp;&raquo;</a>';
      $html .= '</span><span id="' . $id . '_full" style="display: none;">';
      $html .= $long;
      $html .= ' <a class="pointer" onclick="' .
               'document.getElementById(\'' . $id . '_full\').style.display = \'none\'; ' .
               'document.getElementById(\'' . $id . '_excerpt\').style.display = \'inline\'; ' .
               '">&laquo;&nbsp;less</a></span>';
               
      $str = $html;
    }
        
    return $str;
  }
  
  
  static function getInternalUrl($note)
  {
    if (!$note['id'])
    {
      throw new Exception("Can't get internal url for new Note");
    }

    if (!isset($note['User']['Profile']) && !$note['User']['Profile'])
    {
      $note['User'] = LsDoctrineQuery::create()
        ->from('sfGuardUser u')
        ->leftJoin('u.Profile p')
        ->where('u.id = ?', $note['user_id'])
        ->setHydrationMode(Doctrine::HYDRATE_ARRAY)
        ->fetchOne();
    }

    return '@userNote?name=' . $note['User']['Profile']['public_name'] . '&id=' . $note['id'];  
  }
  
  
  static function prepareBodyForEmail($str, $html=false)
  {
    $str = str_replace('<!--more-->', '', $str);

    if ($html)
    {
      $str = preg_replace('# class="[^"]+"#i', '', $str);
      $str = preg_replace('#href="(/[^"]+)"#i', 'href="http://littlesis.org\\1"', $str);
      $str = nl2br($str);

      return $str;
    }
    else
    {
      return strip_tags($str);
    }
  }


  static function getSphinxIds(LsSphinxClient $s, $query=null)
  {
    $s->setSortMode(SPH_SORT_ATTR_DESC, 'created_at');
    $query = LsSphinxClient::cleanQuery($query);        
    $result = $s->Query($query, 'notes notes_delta');

    if ($result === false)
    {
      throw new Exception("Sphinx search failed: " . $s->getLastError());
    }

    if ($result['total_found'] > 0 && isset($result['matches']))
    {
      return array_keys($result['matches']);
    }
    
    return null;
  }


  static function getSphinxRecords(LsSphinxClient $s, $query=null, $hydrationMode=Doctrine::HYDRATE_RECORD)
  {
    if (!$ids = self::getSphinxIds($s, $query))
    {
      return array();
    }

    $notes = LsDoctrineQuery::create()
      ->select('n.*, u.*, p.*, FIELD(n.id, ' . implode(',', $ids) . ') AS field')
      ->from('Note n')
      ->leftJoin('n.User u')
      ->leftJoin('u.Profile p')
      ->whereIn('n.id', $ids)
      ->orderBy('field')
      ->setHydrationMode($hydrationMode)
      ->execute();

    return $notes;     
  }


  static function getSphinxPager(LsSphinxClient $s, $query=null, $hydrationMode=Doctrine::HYDRATE_RECORD)
  {
    $notes = self::getSphinxRecords($s, $query, $hydrationMode);
    
    $pager = new LsDoctrinePager($notes, $s->_page, $s->_limit);
    $pager->setNumResults($s->_total);
    $pager->isSubsetWithCount(true);
    
    return $pager;
  }


  static function getPagerFromSphinxHits($result, $page, $num)
  {
    if ($result['total_found'] > 0 && isset($result['matches']))
    {
      $ids = array_keys($result['matches']);

      $db = Doctrine_Manager::connection();
      $sql = 'SELECT n.*, FIELD(n.id, ' . implode(',', $ids) . ') AS field ' . 
             'FROM note n WHERE n.id IN (' . implode(',', $ids) . ') ' .
             'ORDER BY field';             
      $stmt = $db->execute($sql);      
      $notes = $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    $pager = new LsDoctrinePager($notes, $page, $num);
    $pager->setNumResults($result['total_found']);
    $pager->isSubsetWithCount(true);
    
    return $pager;    
  }
  
  
  static function hasNonUsNetworks($note)
  {
    $networkIds = NoteTable::unserialize($note['network_ids']);
    
    return count(array_diff($networkIds, array(LsListTable::US_NETWORK_ID))) > 0;
  }
  
  
  static function getNetworks($note, $hydrationMode=Doctrine::HYDRATE_ARRAY)
  {
    if (count($networkIds = NoteTable::unserialize($note['network_ids'])))
    {    
      return LsDoctrineQuery::create()
        ->from('LsList l')
        ->whereIn('l.id', $networkIds)
        ->andWhere('l.is_network = 1')
        ->setHydrationMode($hydrationMode)
        ->execute();
    }
    
    return array();    
  }  


  static function getNetworksArray($note)
  {
    if ($count = count($networkIds = NoteTable::unserialize($note['network_ids'])))
    {    
      $db = Doctrine_Manager::connection();
      $sql = 'SELECT * FROM ls_list WHERE id IN (' . implode(',', array_fill(0, $count, '?')) . ') ' . 
             'AND is_network = 1';
      $stmt = $db->execute($sql, $networkIds);
      
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    return array();
  }
}