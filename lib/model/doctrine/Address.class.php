<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Address extends BaseAddress
{

  protected $_isMerge = false;


  public function setMerge($bool)
  {
    $this->_isMerge = (bool) $bool;
  }
  

  public function isMerge()
  {
    return $this->_isMerge;
  }
  
  public function __toString()
  {
    return $this->getOneLiner();
  }

  public function getName()
  {
    return $this->getOneLiner();
  }

  public function getOneLiner()
  {
    $text = $this->street1 ? $this->street1 . ", " : "";
    $text .= $this->street2 ? $this->street2 . ", " : "";
    $text .= $this->city . ", ";
    $text .= $this->state_name ? $this->state_name : ($this->state_id ? $this->State->abbreviation : "");
    $text .= " ";
    $text .= $this->postal ? $this->postal : "";
    $text .= " " . $this->country_name;

    return $text;
  }

  public function getMultiLiner()
  {
    $text = $this->street1 ? $this->street1 . "\n" : "";
    $text .= $this->street2 ? $this->street2 . "\n" : "";
    $text .= $this->city;
    $text .= $this->State->exists() ? ", " . $this->State->abbreviation : "";
    $text .= " ";
    $text .= $this->postal ? " " . $this->postal . " " : "";
    $text .= ($this->Country->name == 'United States') ? "" : $this->Country->name;

    return $text;
  }  
  
  public function countEntities()
  {
    return Doctrine_RawSql::create()
      ->select('COUNT(DISTINCT {e.*}) as num')
      ->from('Entity e, e.EntityAddress ea')
      ->where('ea.address_id = ?', $this->id)
      ->fetchArray();
  }
  
  
  public function getNearbyAddressesQuery($distance=0.01, $excludeExact=false, $category=null)
  {
    if (!$this->longitude || !$this->latitude)
    {
      throw new Exception("Can't get nearby addresses query; longitude and latitude must be set");
    }


    $q = LsDoctrineQuery::create()
      ->select('a.*, POWER( POWER(a.longitude - ' . $this->longitude . ', 2) + POWER(a.latitude - ' . $this->latitude . ', 2), 0.5) AS distance')
      ->from('address a')
      ->leftJoin('a.Entity e')
      ->leftJoin('a.Category c')
      ->where('a.longitude IS NOT NULL AND a.latitude IS NOT NULL')
      ->addWhere('a.entity_id <> ?', $this->entity_id)
      ->addWhere('POWER( POWER(a.longitude - ?, 2) + POWER(a.latitude - ?, 2), 0.5) <= ?', array($this->longitude, $this->latitude, $distance))
      ->orderBy('distance ASC');
    
    if ($excludeExact)
    {
      $q->addWhere('NOT a.longitude <=> ? AND NOT a.latitude <=> ?', array($this->longitude, $this->latitude));
    }
    
    if ($category)
    {
      $q->addWhere('c.name = ?', $category);
    }
    
    return $q;
  }
}